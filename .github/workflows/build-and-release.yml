name: Build and Release Binaries

on:
  release:
    types: [created]
  push:
    branches:
      - test/release-workflow

env:
  PYTHON_VERSION: "3.11"
  PROJECT_NAME: "tg_webm_converter"
  PATH_TO_MAIN_PY: "src/tg_webm_converter/cli.py"

jobs:
  build-and-upload:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: >
          pyinstaller ${{ env.PATH_TO_MAIN_PY }}
          --onefile
          --noconfirm
          --name ${{ env.PROJECT_NAME }}

      - name: Prepare asset for upload
        id: prepare_asset
        shell: bash
        run: |
          # Determine file extension and full path based on OS
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            EXT="exe"
            ASSET_PATH="dist/${{ env.PROJECT_NAME }}.${EXT}"
            ASSET_NAME="${{ env.PROJECT_NAME }}-windows-amd64.${EXT}"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            EXT=""
            ASSET_PATH="dist/${{ env.PROJECT_NAME }}"
            ASSET_NAME="${{ env.PROJECT_NAME }}-macos-amd64"
          else # Linux
            EXT=""
            ASSET_PATH="dist/${{ env.PROJECT_NAME }}"
            ASSET_NAME="${{ env.PROJECT_NAME }}-linux-amd64"
          fi
          
          if [ ! -f "${ASSET_PATH}" ]; then
            echo "Error: Built asset not found at ${ASSET_PATH}"
            exit 1
          fi

          echo "ASSET_PATH=${ASSET_PATH}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV
          
          echo "Asset path determined: ${ASSET_PATH}"
          echo "Asset name determined: ${ASSET_NAME}"

      - name: Upload Build Artifact for Testing
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME }}-${{ runner.os }}-${{ github.sha }}
          path: ${{ env.ASSET_PATH }}
          retention-days: 1

      - name: Upload Release Asset
        if: github.event_name == 'release' && env.ACT != 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}